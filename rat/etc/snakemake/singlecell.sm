import glob
import re
import os
from path import Path

def pathfinder(glob):
    rv = Path('.').glob(glob)
    rv = [x.abspath() for x in rv]
    return rv

def pathmapper(input, newdir, extfrom, extto):
    newdir = Path(newdir)
    def fix_ext(a, fr, to):
        assert a.endswith(fr)
        return a[:-len(fr)] + to    
    return [newdir / fix_ext(x.basename(), extfrom, extto) for x in input]


if os.path.exists('./config.yaml'):
    configfile: './config.yaml'

config_default = dict(
    fq_extension='.fastq.gz',
    dbdir = '/home/mf/data/genome',
    organism =  'mouse',
    build = 'GRCm38.rel79',
    threads = 8,
    group = r'^(.*)_R\d_\d{3}.*',
    )

update_config(config_default, config)
config = config_default

FASTQ_FILES = pathfinder('00.fastq/*' + config['fq_extension'])

FASTQC_HTML = pathmapper(FASTQ_FILES, '10.fastqc', '.fastq.gz', '_fastqc.html')
FASTQC_ZIP = pathmapper(FASTQ_FILES, '10.fastqc', '.fastq.gz', '_fastqc.zip')
ERCC_COUNT = pathmapper(FASTQ_FILES, '20.ercc/out/', '.fastq.gz', '.count')
KALLISTO_OUT = pathmapper(FASTQ_FILES, '30.kallisto/out/', '.fastq.gz', '.kallisto/abundance.tsv')


rule groups:
    input: FASTQ_FILES
    output: "group.tsv"
    run:
        regroup = re.compile(config['group'])
        with open(output[0], 'w') as F:
            for infile in input:
                sample = Path(infile).basename().replace(config['fq_extension'], '')
                name = regroup.search(sample).groups()[0]
                F.write("%s\t%s\n" % (sample, name))

rule kallisto_acc:
    input: KALLISTO_OUT
    output:
        counts="30.kallisto/counts.tsv",
        tpm="30.kallisto/tpm.tsv"        
    script: "scripts/kallisto_summary.py"

rule kallisto:
    input: rules.kallisto_acc.output
    output:
        plot1="test.plot.out"
    script: "scripts/kallisto_summary2.py"
            
rule kallisto1:
    input:
        fq="00.fastq/{sample}.fastq.gz",
        db=expand("{dbdir}/{organism}/{build}/kallisto", **config)
    output:
        "30.kallisto/out/{sample}.kallisto"
    shell:
        """
        echo "db: {input.db}"
        echo "input fastq: {input.fq}"
        echo "out: {output}"
        kallisto quant -t {config[threads]} \
            -i {input.db} -o {output} -b 100 --single -l 200 -s 20 \
            <(zcat {input.fq})
        """
        
rule ercc:
    input: ERCC_COUNT
    output:
        counts = "20.ercc/ercc.tsv",
        counts_rpm = "20.ercc/ercc_rpm.tsv",
        grouped = "20.ercc/ercc_group.tsv",
        grouped_rpm = "20.ercc/ercc_group_rpm.tsv",
        stats = "20.ercc/ercc_stats.tsv",
        plotcv = "20.ercc/ercc_stat_mean_cv.png",
        plotcv2 = "20.ercc/ercc_stat_mean_cv2.png",
    script: "scripts/ercc_report.py"

           
rule ercc_db:
    params:
        ercc_url="https://tools.thermofisher.com/content/sfs/manuals/ERCC92.zip"
    output:
        "20.ercc/db/ercc.1.bt2",
        "20.ercc/db/ercc.2.bt2",
        "20.ercc/db/ercc.3.bt2",
        "20.ercc/db/ercc.4.bt2",
        "20.ercc/db/ERCC92.fa",
        "20.ercc/db/ERCC92.gtf",
        "20.ercc/db/ercc.rev.1.bt2",
        "20.ercc/db/ercc.rev.2.bt2",
        "20.ercc/db/ercc.zip"
    shell:
        """
        mkdir -p 20.ercc/db
        cd 20.ercc/db
        wget -O ercc.zip {params.ercc_url}
        unzip -o ercc.zip
        bowtie2-build ERCC92.fa ercc
        """

rule ercc_bowtie:
    input:
        fq="00.fastq/{sample}.fastq.gz",
        db=rules.ercc_db.output
    output:
        "20.ercc/count/{sample}.count"
    shell:
        r"""
        bowtie2 -p 12 \
            --sensitive-local \
            -x 20.ercc/db/ercc \
            -U {input.fq} \
          | samtools view -S -q 10 - \
          | cut -f 3 | sort | uniq -c \
	  | sed 's/ *\(.*\) \(.*\)/\2\t\1/' \
          > {output}
        """
           
rule fastqc:
    input: FASTQC_ZIP
    output: "fastq_report.tsv"
    script: "scripts/fastq_report.py"
    
            
rule fastqc1:
    input: "00.fastq/{sample}.fastq.gz"
    output:
        html="10.fastqc/{sample}_fastqc.html",
        zipf="10.fastqc/{sample}_fastqc.zip"
    shell:
        "fastqc -o 10.fastqc {input}"

        
rule all:
    input:
        rules.groups.output,
        rules.ercc.output,
        rules.fastqc.output
    output:
        "test.txt"
    shell:
        "echo '{config}'"
